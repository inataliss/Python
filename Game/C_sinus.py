import time
import math


# Класс итерируемых объектов, которые возвращают генератор вместо итератора.
# Генерирует бесконечную последовательность строк из решеток,
# длина которых определяется функцией синуса.
class SinusIterableWithGenerator:
    def __init__(self, steps, width):
        # steps определяет количество шагов (период циклических изменений)
        # width – максимальная "ширина" или длина строки
        self.steps = steps
        self.width = width

    def __iter__(self):
        x = 0.0  # локальная переменная для хранения текущего значения аргумента синуса
        # Бесконечный цикл для генерации последовательности
        while True:
            x += math.pi * 2 / self.steps
            # Вычисляем длину строки по формуле синуса
            length = self.width / 2 + self.width / 2 * math.sin(x) + 1
            # Возвращаем строку, состоящую из символов "#", длина которой
            # определяется целой частью вычисленного значения
            yield '#' * int(length)


# Главная программа для тестирования класса
if __name__ == '__main__':
    # Создаем объект, генерирующий последовательность
    # Параметры: 64 шага, ширина 32
    main_iter = SinusIterableWithGenerator(64, 32)

    # Бесконечный вывод строк с задержкой 0.25 секунды
    for line in main_iter:
        print(line)
        time.sleep(0.25)
